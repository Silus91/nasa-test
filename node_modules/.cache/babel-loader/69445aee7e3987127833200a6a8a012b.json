{"ast":null,"code":"const fetchAction = async data => {\n  const dataTest = data.near_earth_objects;\n  const apiData = [];\n  const objects = Object.keys(dataTest);\n  objects.map(day => {\n    const objectsForTheDay = dataTest[day];\n    objectsForTheDay.map(day => {\n      return apiData.push({\n        id: day.id,\n        name: day.name,\n        missDistance: day.close_approach_data[0].miss_distance.lunar,\n        avgSize: (day.estimated_diameter.meters.estimated_diameter_min + day.estimated_diameter.meters.estimated_diameter_max) / 2\n      });\n    });\n  });\n  console.log(\"ful\", apiData);\n  return apiData;\n};\n\nexport default fetchAction;","map":{"version":3,"sources":["/home/dawid/trening/nasa/src/helpers/mapApi.js"],"names":["fetchAction","data","dataTest","near_earth_objects","apiData","objects","Object","keys","map","day","objectsForTheDay","push","id","name","missDistance","close_approach_data","miss_distance","lunar","avgSize","estimated_diameter","meters","estimated_diameter_min","estimated_diameter_max","console","log"],"mappings":"AACA,MAAMA,WAAW,GAAG,MAAOC,IAAP,IAAgB;AAGhC,QAAMC,QAAQ,GAAGD,IAAI,CAACE,kBAAtB;AACC,QAAMC,OAAO,GAAE,EAAf;AACC,QAAMC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYL,QAAZ,CAAhB;AACDG,EAAAA,OAAO,CAACG,GAAR,CAAYC,GAAG,IAAI;AAChB,UAAMC,gBAAgB,GAAGR,QAAQ,CAACO,GAAD,CAAjC;AAEAC,IAAAA,gBAAgB,CAACF,GAAjB,CAAqBC,GAAG,IAAI;AAC1B,aACEL,OAAO,CAACO,IAAR,CAAa;AACXC,QAAAA,EAAE,EAAEH,GAAG,CAACG,EADG;AAEXC,QAAAA,IAAI,EAAEJ,GAAG,CAACI,IAFC;AAGXC,QAAAA,YAAY,EAAEL,GAAG,CAACM,mBAAJ,CAAwB,CAAxB,EAA2BC,aAA3B,CAAyCC,KAH5C;AAIXC,QAAAA,OAAO,EAAE,CAACT,GAAG,CAACU,kBAAJ,CAAuBC,MAAvB,CAA8BC,sBAA9B,GAAuDZ,GAAG,CAACU,kBAAJ,CAAuBC,MAAvB,CAA8BE,sBAAtF,IAA+G;AAJ7G,OAAb,CADF;AAQD,KATD;AAUD,GAbF;AAeCC,EAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBpB,OAAlB;AAEL,SAAOA,OAAP;AACE,CAxBH;;AA2BE,eAAeJ,WAAf","sourcesContent":["\nconst fetchAction = async (data) => {\n\n\n    const dataTest = data.near_earth_objects;\n     const apiData =[];\n      const objects = Object.keys(dataTest)\n     objects.map(day => {\n        const objectsForTheDay = dataTest[day];\n\n        objectsForTheDay.map(day => {\n          return (\n            apiData.push({\n              id: day.id,\n              name: day.name, \n              missDistance: day.close_approach_data[0].miss_distance.lunar,\n              avgSize: (day.estimated_diameter.meters.estimated_diameter_min + day.estimated_diameter.meters.estimated_diameter_max) /2\n            })\n          )\n        })\n      })\n\n      console.log(\"ful\",apiData)\n\n return apiData\n  }\n\n\n  export default fetchAction;\n"]},"metadata":{},"sourceType":"module"}
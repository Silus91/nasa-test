{"ast":null,"code":"var _jsxFileName = \"/home/dawid/trening/nasa/src/components/Chart/Chart.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { StoreContext } from \"../../context/StoreContext\";\nimport { STOP_LOADING_UI, LOADING_UI } from \"../../types/types\";\nimport { Line } from 'react-chartjs-2';\nimport Chart from 'chart.js/auto';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst ChartPage = () => {\n  _s();\n\n  const {\n    store,\n    dispatch\n  } = useContext(StoreContext);\n  store.data.length ? dispatch({\n    type: STOP_LOADING_UI\n  }) : dispatch({\n    type: LOADING_UI\n  });\n  const data = store.data.near_earth_objects;\n  let chartDataArray = [];\n  let orderedArray = chartDataArray.sort((a, b) => a.missDistance - b.missDistance);\n  Object.keys(store.data.near_earth_objects).map(day => {\n    const objectsForTheDay = data[day];\n    objectsForTheDay.map(day => {\n      return chartDataArray.push({\n        id: day.id,\n        name: day.name,\n        missDistance: day.close_approach_data[0].miss_distance.lunar,\n        avgSize: (day.estimated_diameter.meters.estimated_diameter_min + day.estimated_diameter.meters.estimated_diameter_max) / 2\n      });\n    });\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      height: 400,\n      width: 600,\n      options: {\n        maintainAspectRatio: false\n      },\n      data: {\n        labels: orderedArray.map(ar => ar.missDistance),\n        datasets: [{\n          label: 'Distance from Earth in lunar distances to Avg size of meteoroid in Meters',\n          data: orderedArray.map(ar => ar.avgSize.toFixed(2)),\n          backgroundColor: ['rgba(255, 99, 132, 0.2)', 'rgba(54, 162, 235, 0.2)', 'rgba(255, 206, 86, 0.2)', 'rgba(75, 192, 192, 0.2)', 'rgba(153, 102, 255, 0.2)', 'rgba(255, 159, 64, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)', 'rgba(255, 159, 64, 1)'],\n          borderWidth: 2\n        }]\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ChartPage, \"1/b048/xXVV5KFiWgqeC9DQ6ctU=\");\n\n_c = ChartPage;\nexport default ChartPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChartPage\");","map":{"version":3,"sources":["/home/dawid/trening/nasa/src/components/Chart/Chart.jsx"],"names":["React","useContext","StoreContext","STOP_LOADING_UI","LOADING_UI","Line","Chart","ChartPage","store","dispatch","data","length","type","near_earth_objects","chartDataArray","orderedArray","sort","a","b","missDistance","Object","keys","map","day","objectsForTheDay","push","id","name","close_approach_data","miss_distance","lunar","avgSize","estimated_diameter","meters","estimated_diameter_min","estimated_diameter_max","maintainAspectRatio","labels","ar","datasets","label","toFixed","backgroundColor","borderColor","borderWidth"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,UAAd,QAA+B,OAA/B;AACA,SAASC,YAAT,QAA6B,4BAA7B;AACA,SAASC,eAAT,EAAyBC,UAAzB,QAA2C,mBAA3C;AAEA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAOC,KAAP,MAAkB,eAAlB;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AAEtB,QAAM;AAAEC,IAAAA,KAAF;AAAQC,IAAAA;AAAR,MAAqBR,UAAU,CAACC,YAAD,CAArC;AAEAM,EAAAA,KAAK,CAACE,IAAN,CAAWC,MAAX,GAAuBF,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAACT;AAAP,GAAD,CAA/B,GAA+DM,QAAQ,CAAC;AAAEG,IAAAA,IAAI,EAACR;AAAP,GAAD,CAAvE;AAGA,QAAMM,IAAI,GAAGF,KAAK,CAACE,IAAN,CAAWG,kBAAxB;AACA,MAAIC,cAAc,GAAE,EAApB;AACA,MAAIC,YAAY,GAAGD,cAAc,CAACE,IAAf,CAAoB,CAACC,CAAD,EAAGC,CAAH,KAASD,CAAC,CAACE,YAAF,GAAiBD,CAAC,CAACC,YAAhD,CAAnB;AAEAC,EAAAA,MAAM,CAACC,IAAP,CAAYb,KAAK,CAACE,IAAN,CAAWG,kBAAvB,EAA2CS,GAA3C,CAA+CC,GAAG,IAAI;AACpD,UAAMC,gBAAgB,GAAGd,IAAI,CAACa,GAAD,CAA7B;AACAC,IAAAA,gBAAgB,CAACF,GAAjB,CAAqBC,GAAG,IAAI;AAC1B,aACET,cAAc,CAACW,IAAf,CAAoB;AAClBC,QAAAA,EAAE,EAAEH,GAAG,CAACG,EADU;AAElBC,QAAAA,IAAI,EAAEJ,GAAG,CAACI,IAFQ;AAGlBR,QAAAA,YAAY,EAAEI,GAAG,CAACK,mBAAJ,CAAwB,CAAxB,EAA2BC,aAA3B,CAAyCC,KAHrC;AAIlBC,QAAAA,OAAO,EAAE,CAACR,GAAG,CAACS,kBAAJ,CAAuBC,MAAvB,CAA8BC,sBAA9B,GAAuDX,GAAG,CAACS,kBAAJ,CAAuBC,MAAvB,CAA8BE,sBAAtF,IAA+G;AAJtG,OAApB,CADF;AAQD,KATD;AAUD,GAZD;AAcA,sBACE;AAAA,2BACE,QAAC,IAAD;AACA,MAAA,MAAM,EAAE,GADR;AAEA,MAAA,KAAK,EAAE,GAFP;AAGA,MAAA,OAAO,EAAE;AACPC,QAAAA,mBAAmB,EAAE;AADd,OAHT;AAMA,MAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAEtB,YAAY,CAACO,GAAb,CAAiBgB,EAAE,IAAIA,EAAE,CAACnB,YAA1B,CADJ;AAEJoB,QAAAA,QAAQ,EAAE,CAAC;AACTC,UAAAA,KAAK,EAAE,2EADE;AAET9B,UAAAA,IAAI,EAAEK,YAAY,CAACO,GAAb,CAAiBgB,EAAE,IAAIA,EAAE,CAACP,OAAH,CAAWU,OAAX,CAAmB,CAAnB,CAAvB,CAFG;AAGTC,UAAAA,eAAe,EAAE,CACb,yBADa,EAEb,yBAFa,EAGb,yBAHa,EAIb,yBAJa,EAKb,0BALa,EAMb,yBANa,CAHR;AAWTC,UAAAA,WAAW,EAAE,CACT,uBADS,EAET,uBAFS,EAGT,uBAHS,EAIT,uBAJS,EAKT,wBALS,EAMT,uBANS,CAXJ;AAmBTC,UAAAA,WAAW,EAAE;AAnBJ,SAAD;AAFN;AANN;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD,CA5DD;;GAAMrC,S;;KAAAA,S;AA8DN,eAAeA,SAAf","sourcesContent":["import React,{useContext} from 'react'\nimport { StoreContext } from \"../../context/StoreContext\";\nimport { STOP_LOADING_UI,LOADING_UI } from \"../../types/types\";\n\nimport { Line } from 'react-chartjs-2'\nimport Chart from 'chart.js/auto';\n\nconst ChartPage = () => {\n\n  const { store,dispatch } = useContext(StoreContext);\n\n  store.data.length?     dispatch({ type:STOP_LOADING_UI}) :     dispatch({ type:LOADING_UI})\n\n\n  const data = store.data.near_earth_objects;\n  let chartDataArray =[];\n  let orderedArray = chartDataArray.sort((a,b) => a.missDistance - b.missDistance)\n\n  Object.keys(store.data.near_earth_objects).map(day => {\n    const objectsForTheDay = data[day];\n    objectsForTheDay.map(day => {\n      return (\n        chartDataArray.push({\n          id: day.id,\n          name: day.name, \n          missDistance: day.close_approach_data[0].miss_distance.lunar,\n          avgSize: (day.estimated_diameter.meters.estimated_diameter_min + day.estimated_diameter.meters.estimated_diameter_max) /2\n        })\n      )\n    })\n  })\n\n  return (\n    <div>\n      <Line \n      height={400}\n      width={600}\n      options={{\n        maintainAspectRatio: false\n        }}\n      data={{\n        labels: orderedArray.map(ar => ar.missDistance),\n        datasets: [{\n          label: 'Distance from Earth in lunar distances to Avg size of meteoroid in Meters',\n          data: orderedArray.map(ar => ar.avgSize.toFixed(2)),\n          backgroundColor: [\n              'rgba(255, 99, 132, 0.2)',\n              'rgba(54, 162, 235, 0.2)',\n              'rgba(255, 206, 86, 0.2)',\n              'rgba(75, 192, 192, 0.2)',\n              'rgba(153, 102, 255, 0.2)',\n              'rgba(255, 159, 64, 0.2)'\n          ],\n          borderColor: [\n              'rgba(255, 99, 132, 1)',\n              'rgba(54, 162, 235, 1)',\n              'rgba(255, 206, 86, 1)',\n              'rgba(75, 192, 192, 1)',\n              'rgba(153, 102, 255, 1)',\n              'rgba(255, 159, 64, 1)'\n          ],\n          borderWidth: 2\n      }]\n      }}\n      />\n    </div>\n  )\n}\n\nexport default ChartPage;\n"]},"metadata":{},"sourceType":"module"}
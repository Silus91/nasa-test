{"ast":null,"code":"var _jsxFileName = \"/home/dawid/trening/Calendar-react/src/components/calendar/Calendar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport CalendarHeader from \"./Header\";\nimport \"./styles.css\";\nimport DayList from '../dayList/DayList';\nimport M from \"materialize-css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Calendar = ({\n  value,\n  onChange\n}) => {\n  _s();\n\n  const [calendar, setCalendar] = useState([]);\n  useEffect(() => {\n    M.AutoInit();\n    setCalendar(buildCalendar(value));\n  }, [value]);\n\n  function buildCalendar(date) {\n    const a = [];\n    const startDay = date.clone().startOf(\"month\").startOf(\"week\");\n    const endDay = date.clone().endOf(\"month\").endOf(\"week\");\n\n    const _date = startDay.clone().subtract(1, \"day\");\n\n    while (_date.isBefore(endDay, \"day\")) {\n      a.push(Array(7).fill(0).map(() => _date.add(1, \"day\").clone()));\n    }\n\n    return a;\n  }\n\n  const isSelected = day => {\n    return value.isSame(day, \"day\");\n  };\n\n  const beforeToday = day => {\n    return moment(day).isBefore(new Date(), \"day\");\n  };\n\n  const isToday = day => {\n    return moment(new Date()).isSame(day, \"day\");\n  };\n\n  const dayStyles = day => {\n    if (beforeToday(day)) return \"before\";\n    if (isSelected(day)) return \"selected\";\n    if (isToday(day)) return \"today\";\n    return \"\";\n  };\n\n  const dayNames = [\"s\", \"m\", \"t\", \"w\", \"t\", \"f\", \"s\"];\n\n  const dataDay = value._d.toString();\n\n  const dateDay = dataDay.split(\" \")[2];\n  const dateMonth = dataDay.split(\" \")[1];\n  const dateYear = dataDay.split(\" \")[3];\n  const wholeId = (dateDay + dateMonth + dateYear).toString();\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calendar container\",\n    children: [/*#__PURE__*/_jsxDEV(CalendarHeader, {\n      value: value,\n      onChange: onChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"day-names\",\n        children: dayNames.map((d, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"week\",\n          children: d\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), calendar.map((week, weekNumber) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: week.map((day, dayNumber) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"day\",\n          onClick: () => {\n            if (day < moment(new Date()).startOf(\"day\")) return;\n            onChange(day);\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: dayStyles(day),\n            children: day.format(\"D\").toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 17\n          }, this)\n        }, dayNumber, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 15\n        }, this))\n      }, weekNumber, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DayList, {\n      day: dateDay + dateMonth,\n      id: wholeId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Calendar, \"B98JGg+ZEjb+zsZNXKUH/3xHPRQ=\");\n\n_c = Calendar;\nexport default Calendar;\n\nvar _c;\n\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"sources":["/home/dawid/trening/Calendar-react/src/components/calendar/Calendar.jsx"],"names":["React","useState","useEffect","moment","CalendarHeader","DayList","M","Calendar","value","onChange","calendar","setCalendar","AutoInit","buildCalendar","date","a","startDay","clone","startOf","endDay","endOf","_date","subtract","isBefore","push","Array","fill","map","add","isSelected","day","isSame","beforeToday","Date","isToday","dayStyles","dayNames","dataDay","_d","toString","dateDay","split","dateMonth","dateYear","wholeId","d","index","week","weekNumber","dayNumber","format"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,cAAP,MAA2B,UAA3B;AACA,OAAO,cAAP;AACA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,CAAP,MAAc,iBAAd;;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB;AAAA;;AAExC,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,QAAQ,CAAC,EAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,CAAC,CAACM,QAAF;AACAD,IAAAA,WAAW,CAACE,aAAa,CAACL,KAAD,CAAd,CAAX;AACD,GAHQ,EAGN,CAACA,KAAD,CAHM,CAAT;;AAKA,WAASK,aAAT,CAAuBC,IAAvB,EAA6B;AAC3B,UAAMC,CAAC,GAAG,EAAV;AAEA,UAAMC,QAAQ,GAAGF,IAAI,CAACG,KAAL,GAAaC,OAAb,CAAqB,OAArB,EAA8BA,OAA9B,CAAsC,MAAtC,CAAjB;AACA,UAAMC,MAAM,GAAGL,IAAI,CAACG,KAAL,GAAaG,KAAb,CAAmB,OAAnB,EAA4BA,KAA5B,CAAkC,MAAlC,CAAf;;AAEA,UAAMC,KAAK,GAAGL,QAAQ,CAACC,KAAT,GAAiBK,QAAjB,CAA0B,CAA1B,EAA6B,KAA7B,CAAd;;AAEA,WAAOD,KAAK,CAACE,QAAN,CAAeJ,MAAf,EAAuB,KAAvB,CAAP,EAAsC;AACpCJ,MAAAA,CAAC,CAACS,IAAF,CACEC,KAAK,CAAC,CAAD,CAAL,CACGC,IADH,CACQ,CADR,EAEGC,GAFH,CAEO,MAAMN,KAAK,CAACO,GAAN,CAAU,CAAV,EAAa,KAAb,EAAoBX,KAApB,EAFb,CADF;AAKD;;AACD,WAAOF,CAAP;AACD;;AACD,QAAMc,UAAU,GAAIC,GAAD,IAAS;AAC1B,WAAOtB,KAAK,CAACuB,MAAN,CAAaD,GAAb,EAAkB,KAAlB,CAAP;AACD,GAFD;;AAIA,QAAME,WAAW,GAAIF,GAAD,IAAS;AAC3B,WAAO3B,MAAM,CAAC2B,GAAD,CAAN,CAAYP,QAAZ,CAAqB,IAAIU,IAAJ,EAArB,EAAiC,KAAjC,CAAP;AACD,GAFD;;AAIA,QAAMC,OAAO,GAAIJ,GAAD,IAAS;AACvB,WAAO3B,MAAM,CAAC,IAAI8B,IAAJ,EAAD,CAAN,CAAmBF,MAAnB,CAA0BD,GAA1B,EAA+B,KAA/B,CAAP;AACD,GAFD;;AAIA,QAAMK,SAAS,GAAIL,GAAD,IAAS;AACzB,QAAIE,WAAW,CAACF,GAAD,CAAf,EAAsB,OAAO,QAAP;AACtB,QAAID,UAAU,CAACC,GAAD,CAAd,EAAqB,OAAO,UAAP;AACrB,QAAII,OAAO,CAACJ,GAAD,CAAX,EAAkB,OAAO,OAAP;AAClB,WAAO,EAAP;AACD,GALD;;AAOA,QAAMM,QAAQ,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,EAA+B,GAA/B,CAAjB;;AAEA,QAAMC,OAAO,GAAI7B,KAAK,CAAC8B,EAAN,CAASC,QAAT,EAAjB;;AACA,QAAMC,OAAO,GAAGH,OAAO,CAACI,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAhB;AACA,QAAMC,SAAS,GAAGL,OAAO,CAACI,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAlB;AACA,QAAME,QAAQ,GAAGN,OAAO,CAACI,KAAR,CAAc,GAAd,EAAmB,CAAnB,CAAjB;AACA,QAAMG,OAAO,GAAG,CAACJ,OAAO,GAAEE,SAAT,GAAqBC,QAAtB,EAAgCJ,QAAhC,EAAhB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,4BACE,QAAC,cAAD;AAAgB,MAAA,KAAK,EAAE/B,KAAvB;AAA8B,MAAA,QAAQ,EAAEC;AAAxC;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,MAAf;AAAA,8BACE;AAAK,QAAA,SAAS,EAAC,WAAf;AAAA,kBACG2B,QAAQ,CAACT,GAAT,CAAa,CAACkB,CAAD,EAAIC,KAAJ,kBACZ;AAAiB,UAAA,SAAS,EAAC,MAA3B;AAAA,oBAAmCD;AAAnC,WAAUC,KAAV;AAAA;AAAA;AAAA;AAAA,gBADD;AADH;AAAA;AAAA;AAAA;AAAA,cADF,EAMGpC,QAAQ,CAACiB,GAAT,CAAa,CAACoB,IAAD,EAAOC,UAAP,kBACZ;AAAA,kBACGD,IAAI,CAACpB,GAAL,CAAS,CAACG,GAAD,EAAMmB,SAAN,kBACR;AAEE,UAAA,SAAS,EAAC,KAFZ;AAGE,UAAA,OAAO,EAAE,MAAM;AACb,gBAAInB,GAAG,GAAG3B,MAAM,CAAC,IAAI8B,IAAJ,EAAD,CAAN,CAAmBf,OAAnB,CAA2B,KAA3B,CAAV,EAA6C;AAC7CT,YAAAA,QAAQ,CAACqB,GAAD,CAAR;AACD,WANH;AAAA,iCAQE;AAAK,YAAA,SAAS,EAAEK,SAAS,CAACL,GAAD,CAAzB;AAAA,sBACCA,GAAG,CAACoB,MAAJ,CAAW,GAAX,EAAgBX,QAAhB;AADD;AAAA;AAAA;AAAA;AAAA;AARF,WACOU,SADP;AAAA;AAAA;AAAA;AAAA,gBADD;AADH,SAAUD,UAAV;AAAA;AAAA;AAAA;AAAA,cADD,CANH;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eA2BE,QAAC,OAAD;AAAS,MAAA,GAAG,EAAER,OAAO,GAAGE,SAAxB;AAAmC,MAAA,EAAE,EAAEE;AAAvC;AAAA;AAAA;AAAA;AAAA,YA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CApFD;;GAAMrC,Q;;KAAAA,Q;AAsFN,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport moment from \"moment\";\nimport CalendarHeader from \"./Header\";\nimport \"./styles.css\";\nimport DayList from '../dayList/DayList';\nimport M from \"materialize-css\";\n\nconst Calendar = ({ value, onChange }) => {\n\n  const [calendar, setCalendar] = useState([]);\n\n  useEffect(() => {\n    M.AutoInit();\n    setCalendar(buildCalendar(value));\n  }, [value]);\n\n  function buildCalendar(date) {\n    const a = [];\n\n    const startDay = date.clone().startOf(\"month\").startOf(\"week\");\n    const endDay = date.clone().endOf(\"month\").endOf(\"week\");\n\n    const _date = startDay.clone().subtract(1, \"day\");\n\n    while (_date.isBefore(endDay, \"day\")) {\n      a.push(\n        Array(7)\n          .fill(0)\n          .map(() => _date.add(1, \"day\").clone())\n      );\n    }\n    return a;\n  }\n  const isSelected = (day) => {\n    return value.isSame(day, \"day\");\n  }\n\n  const beforeToday = (day) => {\n    return moment(day).isBefore(new Date(), \"day\");\n  }\n\n  const isToday = (day) => {\n    return moment(new Date()).isSame(day, \"day\");\n  }\n\n  const dayStyles = (day) => {\n    if (beforeToday(day)) return \"before\";\n    if (isSelected(day)) return \"selected\";\n    if (isToday(day)) return \"today\";\n    return \"\";\n  }\n  \n  const dayNames = [\"s\", \"m\", \"t\", \"w\", \"t\", \"f\", \"s\"];\n\n  const dataDay = (value._d.toString());\n  const dateDay = dataDay.split(\" \")[2];\n  const dateMonth = dataDay.split(\" \")[1];\n  const dateYear = dataDay.split(\" \")[3];\n  const wholeId = (dateDay+ dateMonth + dateYear).toString();\n\n  return (\n    <div className=\"calendar container\">\n      <CalendarHeader value={value} onChange={onChange} />\n      <div className=\"body\">\n        <div className=\"day-names\">\n          {dayNames.map((d, index) => (\n            <div key={index} className=\"week\">{d}</div>\n          ))}\n        </div>\n        {calendar.map((week, weekNumber) => (\n          <div key={weekNumber}>\n            {week.map((day, dayNumber) => (\n              <div\n                key={dayNumber}\n                className=\"day\"\n                onClick={() => {\n                  if (day < moment(new Date()).startOf(\"day\")) return;\n                  onChange(day);\n                }}\n              >\n                <div className={dayStyles(day)}>\n                {day.format(\"D\").toString()}\n                </div>\n              </div>\n            ))}\n          </div>\n        ))}\n      </div>\n      <DayList day={dateDay + dateMonth} id={wholeId} />\n    </div>\n  );\n}\n\nexport default Calendar;\n\n"]},"metadata":{},"sourceType":"module"}